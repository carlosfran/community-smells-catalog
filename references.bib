@Article{Huang2022a,
  author                     = {Huang, Zi-Jie and Shao, Zhi-Qing and Fan, Gui-Sheng and Yu, Hui-Qun and Yang, Xing-Guang and Yang, Kang},
  journal                    = {Journal of Computer Science and Technology},
  title                      = {Community Smell Occurrence Prediction on Multi-Granularity by Developer-Oriented Features and Process Metrics},
  year                       = {2022},
  issn                       = {10009000},
  month                      = {FEB},
  note                       = {Cited by: 3},
  number                     = {1},
  pages                      = {182 – 206},
  volume                     = {37},
  abbrev_source_title        = {J Comput Sci Technol},
  abstract                   = {Community smells are sub-optimal developer community structures that hinder productivity. Prior studies performed smell prediction and provided refactoring guidelines from a top-down aspect to help community shepherds. Simultaneously, refactoring smells also requires bottom-up effort from every developer. However, supportive measures and guidelines for them are not available at a fine-grained level. Since recent work revealed developers’ personalities and working states could influence community smells’ emergence and variation, we build prediction models with experience, sentiment, and development process features of developers considering three smells including Organizational Silo, Lone Wolf, and Bottleneck, as well as two related classes including smelly developer and smelly quitter. We predict the five classes in the individual granularity, and we also generate forecasts for the number of smelly developers in the community granularity. The proposed models achieve F-measures ranging from 0.73 to 0.92 in individual-wide within-project, time-wise, and cross-project prediction, and mean R2 performance of 0.68 in community-wide Smelly Developer prediction. We also exploit SHAP (SHapley Additive exPlanations) to assess feature importance to explain our predictors. In conclusion, we suggest developers with heavy workload should foster more frequent communication in a straightforward and polite way to build healthier communities, and we recommend community shepherds to use the forecasting model for refactoring planning. © 2022, Institute of Computing Technology, Chinese Academy of Sciences.},
  address                    = {16 DONGHUANGCHENGGEN NORTH ST, BEIJING 100717, PEOPLES R CHINA},
  affiliation                = {Shao, ZQ; Fan, GS (Corresponding Author), East China Univ Sci \& Technol, Dept Comp Sci \& Engn, Shanghai 200237, Peoples R China. Fan, GS (Corresponding Author), Shanghai Key Lab Comp Software Testing \& Evaluati, Shanghai 200237, Peoples R China. Huang, Zi-Jie; Shao, Zhi-Qing; Fan, Gui-Sheng; Yu, Hui-Qun; Yang, Xing-Guang; Yang, Kang, East China Univ Sci \& Technol, Dept Comp Sci \& Engn, Shanghai 200237, Peoples R China. Fan, Gui-Sheng, Shanghai Key Lab Comp Software Testing \& Evaluati, Shanghai 200237, Peoples R China. Yu, Hui-Qun, Shanghai Engn Res Ctr Smart Energy, Shanghai 200237, Peoples R China.},
  affiliations               = {Department of Computer Science and Engineering, East China University of Science and Technology, Shanghai, 200237, China; Shanghai Key Laboratory of Computer Software Testing and Evaluating, Shanghai, 200237, China; Shanghai Engineering Research Center of Smart Energy, Shanghai, 200237, China},
  author-email               = {hzj@mail.ecust.edu.cn zshao@ecust.edu.cn gsfan@ecust.edu.cn yhq@ecust.edu.cn y12180301@mail.ecust.edu.cn y12190041@mail.ecust.edu.cn},
  author_keywords            = {community smell; developer sentiment; empirical software engineering; socio-technical analysis},
  coden                      = {JCTEE},
  correspondence_address     = {Z.-Q. Shao; Department of Computer Science and Engineering, East China University of Science and Technology, Shanghai, 200237, China; email: zshao@ecust.edu.cn; G.-S. Fan; Shanghai Key Laboratory of Computer Software Testing and Evaluating, Shanghai, 200237, China; email: gsfan@ecust.edu.cn},
  da                         = {2023-06-13},
  doc-delivery-number        = {ZC9NM},
  doi                        = {10.1007/s11390-021-1596-1},
  eissn                      = {1860-4749},
  file                       = {:s11390-021-1596-1.pdf:PDF},
  funding-acknowledgement    = {National Natural Science Foundation of China {[}61772200]; Natural Science Foundation of Shanghai {[}21ZR1416300]},
  funding-text               = {This work was partially supported by the National Natural Science Foundation of China under Grant No. 61772200, and the Natural Science Foundation of Shanghai under Grant No. 21ZR1416300.},
  groups                     = {selecionados, inclusos, catology, caballero-review},
  journal-iso                = {J. Comput. Sci. Technol.},
  keywords                   = {Odors; Software engineering; Structural optimization; Community smell; Developer sentiment; Empirical Software Engineering; Multi-granularity; Oriented features; Oriented process; Refactorings; Socio-technical analyse; Sociotechnical; Technical analysis; Forecasting},
  keywords-plus              = {SOFTWARE DEVELOPERS; IMPACT},
  language                   = {English},
  number-of-cited-references = {59},
  orcid-numbers              = {Huang, Zijie/0000-0002-8911-9889},
  publication_stage          = {Final},
  publisher                  = {Springer},
  ranking                    = {rank4},
  readstatus                 = {read},
  research-areas             = {Computer Science},
  source                     = {Scopus},
  times-cited                = {3},
  type                       = {Article},
  unique-id                  = {WOS:000757837300010},
  url                        = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85125323743&doi=10.1007%2fs11390-021-1596-1&partnerID=40&md5=8e4c15f6f3181100378d973e884107f4},
  usage-count-last-180-days  = {2},
  usage-count-since-2013     = {4},
  web-of-science-categories  = {Computer Science, Hardware \& Architecture; Computer Science, Software Engineering},
  web-of-science-index       = {Science Citation Index Expanded (SCI-EXPANDED)},
}

@Article{DeStefano2022,
  author                 = {Manuel {De Stefano} and Emanuele Iannone and Fabiano Pecorelli and Damian Andrew Tamburri},
  journal                = {Science of Computer Programming},
  title                  = {Impacts of software community patterns on process and product: An empirical study},
  year                   = {2022},
  issn                   = {0167-6423},
  note                   = {Cited by: 8},
  pages                  = {102731},
  volume                 = {214},
  abbrev_source_title    = {Sci Comput Program},
  abstract               = {Software engineering projects are now more than ever a community effort. In the recent past, researchers have shown that their success not only depends on source code quality, but also on other aspects like the balance of power distance, culture, and global engineering practices, and more. In such a scenario, understanding the characteristics of the community around a project and foresee possible problems may be the key to develop successful systems. In this paper, we focus on this research problem and propose an exploratory study on the relation between community patterns, i.e.,recurrent mixes of organizational or social structure types, and aspects related to the quality of software products and processes by mining open-source software repositories hosted on GitHub. We first exploit association rule mining to discover frequent relations between community pattern and community smells, i.e.,sub-optimal patterns across the organizational structure of a software development community that may be precursors of some form of social debt. Further on, we use statistical analyses to understand their impact on software maintainability and on the community engagement, in terms of contributions and issues. Our findings show that different organizational patterns are connected to different forms of socio-technical problems; further on, specific combinations are set in equally specific contextual conditions. Findings support two possible conclusions: (1) practitioners should put in place specific preventive actions aimed at avoiding the emergence of community smells and (2) such actions should be drawn according to the contextual conditions of the organization and the project.},
  affiliations           = {SeSa Lab, University of Salerno, Italy; JADE Lab, Eindhoven University of Technology - Jheronimus Academy of Data Science, Netherlands},
  author_keywords        = {Community patterns; Community smells; Empirical studies},
  coden                  = {SCPGD},
  comment                = {O trabalho exploratório faz uma análise de 25 projetos open-sources com a ferramenta YOSHI (para detectar padrão estrutural da comunidade) e a CodeFace4Smell (para detecter community smells) e analisa a relação da presença dos padrões com a manutenbilidade e engajamento dos projetos.

Utiliza-se do algoritmo APRIORI do R toolkit e modelos lineares para avaliar a relação entre os padrões das estruturas das comunidades e métricas relacionadas a engajamento (qtde de commits, qtde de colaboradores,qtde issues criadas e organizações) e manutenção (LOC, CC, MI, HV) dos projetos.

O trabalho conclui que os community smell específicos podem surgir dependendo das peculiaridades da organização da comunidade.

A pesquisa apenas aponta o uso de algumas métricas que podem ser utilizadas para dimensionar os efeitos dos community smells. Não apresentam técnicas ou abordagens de refatoração.},
  correspondence_address = {M. De Stefano; SeSa Lab, University of Salerno, Italy; email: madestefano@unisa.it},
  doi                    = {10.1016/j.scico.2021.102731},
  file                   = {:Impacts-of-software-community-patterns-on-process-a_2022_Science-of-Computer.pdf:PDF},
  groups                 = {selecionados, inclusos, catology, caballero-review},
  keywords               = {Community patterns, Community smells, Empirical studies},
  language               = {English},
  publication_stage      = {Final},
  publisher              = {Elsevier B.V.},
  ranking                = {rank4},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Article},
  url                    = {https://www.sciencedirect.com/science/article/pii/S0167642321001246},
}

@Article{WurzelGoncalves2022,
  author              = {Wurzel Gonçalves, Pavlína and Çalikli, Gül and Bacchelli, Alberto},
  journal             = {Proceedings of the ACM on Human-Computer Interaction},
  title               = {Interpersonal Conflicts During Code Review},
  year                = {2022},
  issn                = {25730142},
  note                = {#CE06;},
  number              = {CSCW1},
  volume              = {6},
  abbrev_source_title = {Proc. ACM Hum. Comput. Interact.},
  abstract            = {Code review consists of manual inspection, discussion, and judgment of source code by developers other than the code's author. Due to discussions around competing ideas and group decision-making processes, interpersonal conflicts during code reviews are expected. This study systematically investigates how developers perceive code review conflicts and addresses interpersonal conflicts during code reviews as a theoretical construct. Through the thematic analysis of interviews conducted with 22 developers, we confirm that conflicts during code reviews are commonplace, anticipated and seen as normal by developers. Even though conflicts do happen and carry a negative impact for the review, conflicts-if resolved constructively-can also create value and bring improvement. Moreover, the analysis provided insights on how strongly conflicts during code review and its context (i.e., code, developer, team, organization) are intertwined. Finally, there are aspects specific to code review conflicts that call for the research and application of customized conflict resolution and management techniques, some of which are discussed in this paper. Preprint: https://arxiv.org/abs/2201.05425 Data and material: https://doi.org/10.5281/zenodo.5848794  © 2022 ACM.},
  affiliations        = {University of Zurich, Zurich, Switzerland; University of Glasgow, Glasgow, United Kingdom},
  author_keywords     = {code review; conflict management; human factors; interpersonal conflicts},
  doi                 = {10.1145/3512945},
  file                = {:WurzelGoncalves2022 - Interpersonal Conflicts during Code Review.pdf:PDF},
  groups              = {catology, caballero-review, diff-caballero-dantas},
  keywords            = {Codes (symbols); Decision making; HTTP; Code developers; Code review; Conflict management; Group decision making process; Interpersonal conflict; Manual inspection; Research and application; Source codes; Team organizations; Thematic analysis; Human engineering},
  language            = {English},
  publication_stage   = {Final},
  publisher           = {Association for Computing Machinery},
  readstatus          = {skimmed},
  source              = {Scopus},
  type                = {Article},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85128418622&doi=10.1145%2f3512945&partnerID=40&md5=480e78b7354a675fbe70dff66b62e138},
}

@InProceedings{Catolino2021,
  author                     = {Catolino, Gemma and Palomba, Fabio and Tamburri, Damian Andrew and Serebrenik, Alexander},
  booktitle                  = {Proceedings of the 43rd International Conference on Software Engineering: Software Engineering in Society},
  title                      = {Understanding Community Smells Variability: A Statistical Approach},
  year                       = {2021},
  address                    = {Virtual Event, Spain},
  month                      = {May},
  note                       = {Cited by: 9},
  organization               = {IEEE; Assoc Comp Machinery; IEEE Comp Soc; IEEE Tech Council Software Engn; ACM SIGSOFT},
  pages                      = {77–86},
  publisher                  = {IEEE Press},
  series                     = {ICSE-SEIS '21},
  volume                     = {2021-May},
  abbrev_source_title        = {Proc Int Conf Software Eng},
  abstract                   = {Social debt has been defined as the presence in a project of costly sub-optimal organizational conditions, e.g., non-cohesive development communities whose members have communication or coordination issues. Community smells are indicators of such sub-optimal organizational structures and may well lead to social debt. Recently, several studies analyzed actors affecting presence of community smells and their harmfulness, or proposed refactoring strategies to mitigate them. However, to the best of our knowledge, there is still a limited understanding of the factors influencing the variability of community smells, namely how they increase/decrease in magnitude over time. In this paper, we aim at conducting the first statistical experimentation on the matter, by analyzing how a set of 40 socio-technical factors, e.g., turnover or communicability, impact the variability of four community smells on a dataset composed of 60 open-source communities. The results of the study reveal that communicability is, in most cases, important to reduce the risk of an increase of community smell instances, while broadening the collaboration network does not always have a positive effect.},
  affiliation                = {Catolino, G (Corresponding Author), Tilburg Univ, Tilburg, Netherlands. Catolino, G (Corresponding Author), Jheronimus Acad Data Sci, sHertogenbosch, Netherlands. Catolino, Gemma, Tilburg Univ, Tilburg, Netherlands. Catolino, Gemma; Tamburri, Damian Andrew, Jheronimus Acad Data Sci, sHertogenbosch, Netherlands. Palomba, Fabio, Univ Salerno, Salerno, Italy. Tamburri, Damian Andrew; Serebrenik, Alexander, Eindhoven Univ Technol, Eindhoven, Netherlands.},
  affiliations               = {Tilburg University, Netherlands; Jheronimus Academy of Data Science, Netherlands; University of Salerno, Italy; Eindhoven University of Technology, Netherlands},
  author-email               = {g.catolino@tilburguniversity.edu fpalomba@unisa.it d.a.tamburri@tue.nl a.serebrenik@tue.nl},
  author_keywords            = {Community Smells; Empirical Study; Social Debt; Statistical Models},
  book-group-author          = {IEEE COMP SOC},
  coden                      = {PCSED},
  comment                    = {O trabalho faz uma avaliação estatística sobre os 4 bem conhecidos community smells para avaliar quais métricas/fatrores (dentre 40 métricas) em uma base previamente disponibilizada com 60 projetos.
Apesar do trabalho citar métricas, as métricas são de outro trabalho já incluído no mapeamento.},
  da                         = {2023-06-13},
  doc-delivery-number        = {BS2NX},
  doi                        = {10.1109/ICSE-SEIS52602.2021.00017},
  file                       = {:Catolino2021 - Understanding Community Smells Variability_ a Statistical Approach.pdf:PDF},
  funding-acknowledgement    = {European Commission {[}825040]; Swiss National Science Foundation {[}PZ00P2 186090]},
  funding-text               = {Gemma and Damian are partially supported by the European Commission grant no. 825040 (RADON). Fabio acknowledges the support of the Swiss National Science Foundation through the SNF Project No. PZ00P2 186090 (TED).},
  groups                     = {selecionados, catology, caballero-review, diff-caballero-dantas},
  isbn                       = {9780738133225},
  issn                       = {02705257},
  journal                    = {Proceedings - International Conference on Software Engineering},
  keywords                   = {Open source software; Structural optimization; Collaboration network; Development community; Open source communities; Organizational structures; Refactorings; Sociotechnical; Statistical approach; Odors},
  keywords-plus              = {ARCHITECTURE},
  language                   = {English},
  number-of-cited-references = {52},
  numpages                   = {10},
  orcid-numbers              = {Tamburri, Damian Andrew/0000-0003-1230-8961},
  publication_stage          = {Final},
  ranking                    = {rank1},
  readstatus                 = {read},
  research-areas             = {Computer Science},
  researcherid-numbers       = {Tamburri, Damian Andrew/AAJ-2507-2021},
  source                     = {Scopus},
  times-cited                = {7},
  type                       = {Conference paper},
  unique-id                  = {WOS:000704137200009},
  url                        = {https://doi.org/10.1109/ICSE-SEIS52602.2021.00017},
  usage-count-last-180-days  = {0},
  usage-count-since-2013     = {1},
  web-of-science-categories  = {Computer Science, Interdisciplinary Applications; Computer Science, Software Engineering},
  web-of-science-index       = {Conference Proceedings Citation Index - Science (CPCI-S)},
}

@InProceedings{Almarimi2021,
  author              = {Almarimi, Nuri and Ouni, Ali and Chouchen, Moataz and Mkaouer, Mohamed Wiem},
  booktitle           = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  title               = {CsDetector: An Open Source Tool for Community Smells Detection},
  year                = {2021},
  address             = {New York, NY, USA},
  editor              = {Spinellis D.},
  note                = {Cited by: 5},
  pages               = {1560–1564},
  publisher           = {Association for Computing Machinery},
  series              = {ESEC/FSE 2021},
  abbrev_source_title = {ESEC/FSE - Proc. ACM Jt. Meet. Eur. Softw. Eng. Conf. Symp. Found. Softw. Eng.},
  abstract            = {Community smells represent symptoms of sub-optimal organizational and social issues within software development communities that often lead to additional project costs and reduced software quality. Previous research identified a variety of community smells that are connected to sub-optimal patterns under different perspectives of organizational-social structures in the software development community. To detect community smells and understanding the characteristics of such organizational-social structures in a project, we propose csDetector, an open source tool that is able to automatically detect community smells within a project and provide relevant socio-technical metrics. csDetector uses a machine learning based detection approach that learns from various existing bad community development practices to provide automated support in detecting related community smells. We evaluate the effectiveness of csDetector on a benchmark of 143 open source projects from GitHub. Our results show that the csDetector tool can detect ten commonly occurring community smells in open software projects with an average F1 score of 84%. csDetector is publicly available, with a demo video, at: https://github.com/Nuri22/csDetector.},
  affiliations        = {ETS, Canada; University of Quebec, Canada; Rochester Institute of Technology, United States},
  author_keywords     = {community smells; Detection Tool; Software projects},
  doi                 = {10.1145/3468264.3473121},
  file                = {:3468264.3473121.pdf:PDF},
  groups              = {selecionados, inclusos, catology, caballero-review},
  isbn                = {9781450385626},
  journal             = {ESEC/FSE 2021 - Proceedings of the 29th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  keywords            = {Detection Tool, community smells, Software projects},
  language            = {English},
  location            = {Athens, Greece},
  numpages            = {5},
  publication_stage   = {Final},
  ranking             = {rank5},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://doi.org/10.1145/3468264.3473121},
}

@InProceedings{Huang2021,
  author                     = {Huang, Zijie and Shao, Zhiqing and Fan, Guisheng and Gao, Jianhua and Zhou, Ziyi and Yang, Kang and Yang, Xingguang},
  booktitle                  = {2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
  title                      = {Predicting Community Smells’ Occurrence on Individual Developers by Sentiments},
  year                       = {2021},
  address                    = {10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA},
  month                      = {May},
  note                       = {Cited by: 7; All Open Access, Green Open Access},
  organization               = {IEEE; Assoc Comp Machinery; IEEE Comp Soc; IEEE Tech Council Software Engn; ACM Special Interest Grp Software Engn},
  pages                      = {230-241},
  publisher                  = {IEEE Computer Society},
  series                     = {International Conference on Program Comprehension},
  volume                     = {2021-May},
  abbrev_source_title        = {IEEE Int. Conf. Program Comprehension},
  abstract                   = {Community smells appear in sub-optimal software development community structures, causing unforeseen additional project costs, e.g., lower productivity and more technical debt. Previous studies analyzed and predicted community smells in the granularity of community sub-groups using socio-technical factors. However, refactoring such smells requires the effort of developers individually. To eliminate them, supportive measures for every developer should be constructed according to their motifs and working states. Recent work revealed developers' personalities could influence community smells' variation, and their sentiments could impact productivity. Thus, sentiments could be evaluated to predict community smells' occurrence on them. To this aim, this paper builds a developer-oriented and sentiment-aware community smell prediction model considering 3 smells such as Organizational Silo, Lone Wolf, and Bottleneck. Furthermore, it also predicts if a developer quitted the community after being affected by any smell. The proposed model achieves cross- and within-project prediction F-Measure ranging from 76% to 93%. Research also reveals 6 sentimental features having stronger predictive power compared with activeness metrics. Imperative and indicative expressions, politeness, and several emotions are the most powerful predictors. Finally, we test statistically the mean and distribution of sentimental features. Based on our findings, we suggest developers should communicate in a straightforward and polite way.},
  affiliation                = {Shao, ZQ; Fan, GS (Corresponding Author), East China Univ Sci \& Technol, Dept Comp Sci \& Engn, Shanghai, Peoples R China. Huang, Zijie; Shao, Zhiqing; Fan, Guisheng; Zhou, Ziyi; Yang, Kang; Yang, Xingguang, East China Univ Sci \& Technol, Dept Comp Sci \& Engn, Shanghai, Peoples R China. Gao, Jianhua, Shanghai Normal Univ, Dept Comp Sci \& Technol, Shanghai, Peoples R China.},
  affiliations               = {East China University of Science and Technology, Department of Computer Science and Engineering, Shanghai, China; Shanghai Normal University, Department of Computer Science and Technology, Shanghai, China},
  author-email               = {hzj@mail.ecust.edu.cn zshao@ecust.edu.cn gsfan@ecust.edu.cn jhgao@shnu.edu.cn zhouziyi@mail.ecust.edu.cn 15921709583@163.com xingguang2955@163.com},
  author_keywords            = {community smell; developer sentiment; empirical software engineering; open source system; social debt},
  book-group-author          = {IEEE COMP SOC},
  da                         = {2023-06-13},
  doc-delivery-number        = {BS1MQ},
  doi                        = {10.1109/ICPC52881.2021.00030},
  file                       = {:Huang2021 - Predicting Community Smells’ Occurrence on Individual Developers by Sentiments.pdf:PDF},
  funding-acknowledgement    = {NSF of China {[}61772200]; Shanghai Natural Science Foundation {[}17ZR1406900, 17ZR1429700]; Software and Integrated Circuit Industry Development Special Funds of Shanghai Economic and Information Commission {[}XX-XXFZ-02-20-2463]},
  funding-text               = {This work is partially supported by the NSF of China under grants No. 61772200, the Shanghai Natural Science Foundation No. 17ZR1406900, 17ZR1429700, and the Software and Integrated Circuit Industry Development Special Funds of Shanghai Economic and Information Commission under Grant No. XX-XXFZ-02-20-2463.},
  groups                     = {selecionados, inclusos, catology, caballero-review},
  isbn                       = {978-166541403-6},
  issn                       = {2643-7171},
  journal                    = {IEEE International Conference on Program Comprehension},
  keywords                   = {Computer programming; Forecasting; Predictive analytics; Productivity; Software design; Development community; Prediction model; Predictive power; Project cost; Refactorings; Sociotechnical; Technical debts; Working state; Odors},
  keywords-plus              = {SOFTWARE DEVELOPERS},
  language                   = {English},
  number-of-cited-references = {78},
  oa                         = {Green Submitted},
  orcid-numbers              = {Huang, Zijie/0000-0002-8911-9889 Zhou, Ziyi/0000-0002-8267-8178},
  publication_stage          = {Final},
  ranking                    = {rank4},
  readstatus                 = {read},
  research-areas             = {Computer Science},
  source                     = {Scopus},
  times-cited                = {2},
  type                       = {Conference paper},
  unique-id                  = {WOS:000693398800023},
  url                        = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85113249384&doi=10.1109%2fICPC52881.2021.00030&partnerID=40&md5=4b077e0808597059c1a86172d30efe7a},
  usage-count-last-180-days  = {0},
  usage-count-since-2013     = {2},
  web-of-science-categories  = {Computer Science, Software Engineering; Computer Science, Theory \& Methods},
  web-of-science-index       = {Conference Proceedings Citation Index - Science (CPCI-S)},
}

@Article{Palomba2021a,
  author                     = {Fabio Palomba and Damian Andrew Tamburri},
  journal                    = {Journal of Systems and Software},
  title                      = {Predicting the emergence of community smells using socio-technical metrics: A machine-learning approach},
  year                       = {2021},
  issn                       = {0164-1212},
  month                      = {JAN},
  note                       = {Cited by: 22},
  pages                      = {110847},
  volume                     = {171},
  abbrev_source_title        = {J Syst Software},
  abstract                   = {Community smells represent sub-optimal conditions appearing within software development communities (e.g., non-communicating sub-teams, deviant contributors, etc.) that may lead to the emergence of social debt and increase the overall project’s cost. Previous work has studied these smells under different perspectives, investigating their nature, diffuseness, and impact on technical aspects of source code. Furthermore, it has been shown that some socio-technical metrics like, for instance, the well-known socio-technical congruence, can potentially be employed to foresee their appearance. Yet, there is still a lack of knowledge of the actual predictive power of such socio-technical metrics. In this paper, we aim at tackling this problem by empirically investigating (i) the potential value of socio-technical metrics as predictors of community smells and (ii) what is the performance of within- and cross-project community smell prediction models based on socio-technical metrics. To this aim, we exploit a dataset composed of 60 open-source projects and consider four community smells such as Organizational Silo, Black Cloud, Lone Wolf, and Bottleneck. The key results of our work report that a within-project solution can reach F-Measure and AUC-ROC of 77% and 78%, respectively, while cross-project models still require improvements, being however able to reach an F-Measure of 62% and overcome a random baseline. Among the metrics investigated, socio-technical congruence, communicability, and turnover-related metrics are the most powerful predictors of the emergence of community smells.},
  address                    = {STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA},
  affiliation                = {Palomba, F (Corresponding Author), Univ Salerno, SeSa Lab, Fisciano, Italy. Palomba, Fabio, Univ Salerno, SeSa Lab, Fisciano, Italy. Tamburri, Damian Andrew, Eindhoven Univ Technol, JADE Lab, Jheronimus Acad Data Sci, Eindhoven, Netherlands.},
  affiliations               = {SeSa Lab - University of Salerno, Italy; JADE Lab - Eindhoven University of Technology/Jheronimus Academy of Data Science, Netherlands},
  article-number             = {110847},
  author-email               = {fpalomba@unisa.it d.a.tamburri@tue.nl},
  author_keywords            = {Community smells; Empirical software engineering; Social debt},
  coden                      = {JSSOD},
  correspondence_address     = {F. Palomba; SeSa Lab - University of Salerno, Italy; email: fpalomba@unisa.it},
  da                         = {2023-06-13},
  doc-delivery-number        = {OV9CU},
  doi                        = {10.1016/j.jss.2020.110847},
  eissn                      = {1873-1228},
  file                       = {:palomba2021.pdf:PDF},
  funding-acknowledgement    = {Swiss National Science Foundation through the SNF Project {[}PZ00P2\_186090]; European Commission {[}0421, 787061, 825040, 825480]},
  funding-text               = {The authors would like to thank the Associate Editor and the anonymous Reviewers for their insightful comments provided during the peer-review process of the article, which were instrumental to improve the quality of the manuscript. Fabio Palomba gratefully acknowledges the support of the Swiss National Science Foundation through the SNF Project No. PZ00P2\_186090 (TED). Furthermore, Damians' work is partially supported by the European Commission grant no. 0421 (Interreg ICT), Werkinzicht and the European Commission grants no. 787061 (H2020), ANITA, no. 825040 (H2020), RADON, and no. 825480 (H2020), SODALITE.},
  groups                     = {selecionados, inclusos, catology, caballero-review},
  journal-iso                = {J. Syst. Softw.},
  keywords                   = {Machine learning; Open source software; Predictive analytics; Software design; Turing machines; Development community; Machine learning approaches; Open source projects; Optimal conditions; Potential values; Prediction model; Predictive power; Technical aspects; Odors},
  keywords-plus              = {BUG PREDICTION; SELECTION; TURNOVER; CLASSIFIERS},
  language                   = {English},
  number-of-cited-references = {98},
  orcid-numbers              = {Tamburri, Damian Andrew/0000-0003-1230-8961},
  publication_stage          = {Final},
  publisher                  = {Elsevier Inc.},
  ranking                    = {rank4},
  readstatus                 = {read},
  research-areas             = {Computer Science},
  researcherid-numbers       = {Tamburri, Damian Andrew/AAJ-2507-2021},
  source                     = {Scopus},
  times-cited                = {16},
  type                       = {Article},
  unique-id                  = {WOS:000592499600006},
  url                        = {https://www.sciencedirect.com/science/article/pii/S0164121220302375},
  usage-count-last-180-days  = {1},
  usage-count-since-2013     = {9},
  web-of-science-categories  = {Computer Science, Software Engineering; Computer Science, Theory \& Methods},
  web-of-science-index       = {Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)},
}

@Article{Eken2021a,
  author                 = {Eken, Beyza and Palma, Francis and Ayşe, Başar and Ayşe, Tosun},
  journal                = {Software Quality Journal},
  title                  = {An empirical study on the effect of community smells on bug prediction},
  year                   = {2021},
  issn                   = {09639314},
  note                   = {Cited by: 5},
  number                 = {1},
  pages                  = {159 – 194},
  volume                 = {29},
  abbrev_source_title    = {Softw. Qual. J.},
  abstract               = {Community-aware metrics through socio-technical developer networks or organizational structures have already been studied in the software bug prediction field. Community smells are also proposed to identify communication and collaboration patterns in developer communities. Prior work reports a statistical association between community smells and code smells identified in software modules. We investigate the contribution of community smells on predicting bug-prone classes and compare their contribution with that of code smell-related information and state-of-the-art process metrics. We conduct our empirical analysis on ten open-source projects with varying sizes, buggy and smelly class ratios. We build seven different bug prediction models to answer three RQs: a baseline model including a state-of-the-art metric set used, three models incorporating a particular metric set, namely community smells, code smells, code smell intensity, into the baseline, and three models incorporating a combination of smell-related metrics into the baseline. The performance of these models is reported in terms of recall, false positive rates, F-measure and AUC and statistically compared using Scott–Knott ESD tests. Community smells improve the prediction performance of a baseline model by up to 3% in terms of AUC, while code smell intensity improves the baseline models by up to 40% in terms of F-measure and up to 17% in terms of AUC. The conclusions are significantly influenced by the validation strategies used, algorithms and the selected projects’ data characteristics. While the code smell intensity metric captures the most information about technical flaws in predicting bug-prone classes, the community smells also contribute to bug prediction models by revealing communication and collaboration flaws in software development teams. Future research is needed to capture the communication patterns through multiple channels and to understand whether socio-technical flaws could be used in a cross-project bug prediction setting. © 2021, Springer Science+Business Media, LLC, part of Springer Nature.},
  affiliations           = {Faculty of Computer and Informatics Engineering, Istanbul Technical University, Istanbul, Turkey; Data-driven Software and Information Quality, DISA, Department of Computer Science and Media Technology, Linnaeus University, Kalmar, Sweden; Data Science Laboratory, Department of Mechanical and Industrial Engineering, Ryerson University, Toronto, M5B 2K3, ON, Canada},
  author_keywords        = {Bug prediction; Community smells; Mining software repositories},
  comment                = {Não trata-se de causa, efeito, detect, prediction ou refactoring community smell. Aborda a relação entre community smell e a predição de bug através de modelos com dados de community smell, code smell e code smell intensity.},
  correspondence_address = {B. Eken; Faculty of Computer and Informatics Engineering, Istanbul Technical University, Istanbul, Turkey; email: beyzaeken@itu.edu.tr},
  doi                    = {10.1007/s11219-020-09538-7},
  file                   = {:s11219-020-09538-7.pdf:PDF},
  groups                 = {selecionados, catology, caballero-review, diff-caballero-dantas},
  keywords               = {Forecasting; Odors; Open source software; Software design; Communication and collaborations; Communication pattern; Data characteristics; Open source projects; Organizational structures; Prediction performance; Software development teams; Validation strategies; Predictive analytics},
  language               = {English},
  publication_stage      = {Final},
  publisher              = {Springer},
  ranking                = {rank1},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Article},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85100871955&doi=10.1007%2fs11219-020-09538-7&partnerID=40&md5=db34d14be1d38564e1377bfa7a6c070f},
}

@Conference{Almarimi2020c,
  author              = {Almarimi, Nuri and Ouni, Ali and Chouchen, Moataz and Saidani, Islem and Mkaouer, Mohamed Wiem},
  booktitle           = {Proceedings of the 15th International Conference on Global Software Engineering},
  title               = {On the Detection of Community Smells Using Genetic Programming-Based Ensemble Classifier Chain},
  year                = {2020},
  address             = {New York, NY, USA},
  note                = {Cited by: 17},
  pages               = {43 – 54},
  publisher           = {Association for Computing Machinery},
  series              = {ICGSE '20},
  abbrev_source_title = {Proc. - ACM/IEEE Int. Conf. Global Softw. Eng., ICGSE},
  abstract            = {Community smells are symptoms of organizational and social issues within the software development community that often increase the project costs and impact software quality. Recent studies have identified a variety of community smells and defined them as suboptimal patterns connected to organizational-social structures in the software development community such as the lack of communication, coordination and collaboration. Recognizing the advantages of the early detection of potential community smells in a software project, we introduce a novel approach that learns from various community organizational and social practices to provide an automated support for detecting community smells. In particular, our approach learns from a set of interleaving organizational-social symptoms that characterize the existence of community smell instances in a software project. We build a multi-label learning model to detect 8 common types of community smells. We use the ensemble classifier chain (ECC) model that transforms multi-label problems into several single-label problems which are solved using genetic programming (GP) to find the optimal detection rules for each smell type. To evaluate the performance of our approach, we conducted an empirical study on a benchmark of 103 open source projects and 407 community smell instances. The statistical tests of our results show that our approach can detect the eight considered smell types with an average F-measure of 89% achieving a better performance compared to different state-of-the-art techniques. Furthermore, we found that the most influential factors that best characterize community smells include the social network density and closeness centrality as well as the standard deviation of the number of developers per time zone and per community.  © 2020 ACM.},
  affiliations        = {University of Quebec, Montreal, Canada; Rochester Institute of Technology, United States},
  author_keywords     = {community smells; genetic programming; multi-label learning; search-based software engineering; social debt; socio-technical factors},
  doi                 = {10.1145/3372787.3390439},
  file                = {:almarimi2020.pdf:PDF},
  groups              = {selecionados, inclusos, catology, caballero-review},
  isbn                = {978-145037093-6},
  journal             = {Proceedings - 2020 ACM/IEEE 15th International Conference on Global Software Engineering, ICGSE 2020},
  keywords            = {Benchmarking; Computer software selection and evaluation; Genetic algorithms; Genetic programming; Learning systems; Odors; Software design; Software quality; Closeness centralities; Development community; Ensemble classifiers; Influential factors; Multi-label learning; Multi-label problems; Open source projects; State-of-the-art techniques; Open source software},
  language            = {English},
  location            = {Seoul, Republic of Korea},
  numpages            = {12},
  publication_stage   = {Final},
  ranking             = {rank5},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://doi.org/10.1145/3372787.3390439},
}

@Article{Almarimi2020a,
  author                     = {Nuri Almarimi and Ali Ouni and Mohamed Wiem Mkaouer},
  journal                    = {Knowledge-Based Systems},
  title                      = {Learning to detect community smells in open source software projects},
  year                       = {2020},
  issn                       = {0950-7051},
  month                      = {SEP 27},
  note                       = {Cited by: 13},
  pages                      = {106201},
  volume                     = {204},
  abbrev_source_title        = {Knowl Based Syst},
  abstract                   = {Community smells are symptoms of organizational and social issues within the software development community that often lead to additional project costs. Recent studies identified a variety of community smells and defined them as sub-optimal patterns connected to organizational-social structures in the software development community. To early detect and discover existence of potential community smells in a software project, we introduce, in this paper, a novel machine learning-based detection approach, named csDetector, that learns from various existing bad community development practices to provide automated support in detecting such community smells. In particular, our approach learns from a set of organizational-social symptoms that characterize the existence of potential instances of community smells in a software project. We built a detection model using Decision Tree by adopting the C4.5 classifier to identify eight commonly occurring community smells in software projects. To evaluate the performance of our approach, we conduct an empirical study on a benchmark of 74 open source projects from Github. Our statistical results show a high performance of csDetector, achieving an average accuracy of 96% and AUC of 0.94. Moreover, our results indicate that the csDetector outperforms two recent state-of-the-art techniques in terms of detection accuracy. Finally, we investigate the most influential community-related metrics to identify each community smell type. We found that the number of commits and developers per time zone, the number of developers per community, and the social network betweenness and closeness centrality are the most influential community characteristics.},
  address                    = {RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS},
  affiliation                = {Ouni, A (Corresponding Author), Univ Quebec, ETS Montreal, Montreal, PQ, Canada. Almarimi, Nuri; Ouni, Ali, Univ Quebec, ETS Montreal, Montreal, PQ, Canada. Mkaouer, Mohamed Wiem, Rochester Inst Technol, Rochester, NY 14623 USA.},
  affiliations               = {ETS Montreal, University of Quebec, QC, Canada; Rochester Institute of Technology, NY, United States},
  article-number             = {106201},
  author-email               = {ouniaali@gmail.com},
  author_keywords            = {Community smells detection; Machine learning; Social debt; Socio-technical metrics},
  coden                      = {KNSYE},
  correspondence_address     = {A. Ouni; ETS Montreal, University of Quebec, QC, Canada; email: ouniaali@gmail.com},
  da                         = {2023-06-13},
  doc-delivery-number        = {MV7TB},
  doi                        = {10.1016/j.knosys.2020.106201},
  eissn                      = {1872-7409},
  file                       = {:1-s2.0-S0950705120304226-main.pdf:PDF;:Knosys2020_community_smells.pdf:PDF},
  funding-acknowledgement    = {Natural Sciences and Engineering Research Council of Canada (NSERC)},
  funding-text               = {This work is partially supported by the Natural Sciences and Engineering Research Council of Canada (NSERC).},
  groups                     = {selecionados, inclusos, catology, caballero-review},
  journal-iso                = {Knowledge-Based Syst.},
  keywords                   = {Benchmarking; Decision trees; Information dissemination; Odors; Open systems; Software design; Closeness centralities; Community development; Detection accuracy; Detection approach; Development community; Empirical studies; Open source projects; Open source software projects; Open source software},
  keywords-plus              = {PREDICTION; QUALITY},
  language                   = {English},
  number-of-cited-references = {50},
  orcid-numbers              = {Mkaouer, Mohamed Wiem/0000-0001-6010-7561},
  publication_stage          = {Final},
  publisher                  = {Elsevier B.V.},
  ranking                    = {rank5},
  readstatus                 = {read},
  research-areas             = {Computer Science},
  researcherid-numbers       = {Mkaouer, Mohamed Wiem/N-7476-2017},
  source                     = {Scopus},
  times-cited                = {12},
  type                       = {Article},
  unique-id                  = {WOS:000556554200019},
  url                        = {https://www.sciencedirect.com/science/article/pii/S0950705120304226},
  usage-count-last-180-days  = {0},
  usage-count-since-2013     = {13},
  web-of-science-categories  = {Computer Science, Artificial Intelligence},
  web-of-science-index       = {Science Citation Index Expanded (SCI-EXPANDED)},
}

@InProceedings{Catolino2020,
  author              = {Catolino, Gemma and Palomba, Fabio and Tamburri, Damian A. and Serebrenik, Alexander and Ferrucci, Filomena},
  booktitle           = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: Software Engineering in Society},
  title               = {Refactoring Community Smells in the Wild: The Practitioner's Field Manual},
  year                = {2020},
  address             = {New York, NY, USA},
  month               = {Oct},
  note                = {Cited by: 7},
  pages               = {25–34},
  publisher           = {Association for Computing Machinery},
  series              = {ICSE-SEIS '20},
  abbrev_source_title = {Proc Int Conf Software Eng},
  abstract            = {Community smells have been defined as sub-optimal organizational structures that may lead to social debt. Previous studies have shown that they are highly diffused in both open- and closed-source projects, are perceived as harmful by practitioners, and can even lead to the introduction of technical debt in source code. Despite the presence of this body of research, little is known on the practitioners' perceived prominence of community smells in practice as well as on the strategies adopted to deal with them. This paper aims at bridging this gap by proposing an empirical study in which 76 software practitioners are inquired on (i) the prominence of four well-known community smells, i.e., Organizational Silo, Black Cloud, Lone Wolf, and Radio Silence, in their contexts and (ii) the methods they adopted to "refactor" them. Our results first reveal that community smells frequently manifest themselves in software projects and, more importantly, there exist specific refactoring practices to deal with each of the considered community smells.},
  affiliations        = {University of Salerno, Fisciano, Italy; Jheronimus Academy of Data Science, s'Hertogenbosch, Netherlands; Eindhoven University of Technology, Eindhoven, Netherlands},
  author_keywords     = {Community Smells; Empirical Software Engineering; Social Debt},
  coden               = {PCSED},
  doi                 = {10.1145/3377815.3381380},
  file                = {:Catolino2020a - Refactoring Community Smells in the Wild_ the Practitioner’s Field Manual.pdf:PDF},
  groups              = {selecionados, inclusos, catology, caballero-review},
  isbn                = {9781450371254},
  issn                = {02705257},
  journal             = {Proceedings - International Conference on Software Engineering},
  keywords            = {empirical software engineering, social debt, community smells},
  language            = {English},
  location            = {Seoul, South Korea},
  numpages            = {10},
  publication_stage   = {Final},
  ranking             = {rank4},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {10.1145/3377815.3381380},
}

@InProceedings{DeStefano2020,
  author              = {De Stefano, Manuel and Pecorelli, Fabiano and Tamburri, Damian A. and Palomba, Fabio and De Lucia, Andrea},
  booktitle           = {Proceedings of the IEEE/ACM 42nd International Conference on Software Engineering Workshops},
  title               = {Splicing Community Patterns and Smells: A Preliminary Study},
  year                = {2020},
  address             = {New York, NY, USA},
  note                = {Cited by: 11},
  pages               = {703–710},
  publisher           = {Association for Computing Machinery},
  series              = {ICSEW'20},
  abbrev_source_title = {Proc. - IEEE/ACM Int. Conf. Softw. Eng. Workshops, ICSEW},
  abstract            = {Software engineering projects are now more than ever a community effort. In the recent past, researchers have shown that their success may not only depend on source code quality, but also on other aspects like the balance of distance, culture, global engineering practices, and more. In such a scenario, understanding the characteristics of the community around a project and foresee possible problems may be the key to develop successful systems. In this paper, we focus on this research problem and propose an exploratory study on the relation between community patterns, i.e., recurrent mixes of organizational or social structure types, and smells, i.e., sub-optimal patterns across the organizational structure of a software development community that may be precursors of some sort of social debt. We exploit association rule mining to discover frequent relations between them. Our findings show that different organizational patterns are connected to different forms of socio-technical problems, possibly suggesting that practitioners should put in place specific preventive actions aimed at avoiding the emergence of community smells depending on the organization of the project.},
  affiliations        = {SeSa Lab, University of Salerno, Italy; Jheronimus Academy of Data Science, Netherlands},
  author_keywords     = {Community patterns; Community smells; Empirical studies},
  comment             = {O trabalho impiríco faz uma análise de 25 projetos open-sources com a ferramenta YOSHI (para detectar padrão estrutural da comunidade) e a CodeFace4Smell (para detecter community smells) e analisa a relação da presença destes smells com o padrão das estruturas de comunidades (Tabela 2) utilizando algoritmo APRIORI do R toolkit.

Forte relação com trabalho de Tamburri et al. (201?) no qual apresenta esta relação com smells e os mesmos padrões estruturais das comunidades. O trabalho corrente, faz apenas um estudo ímpirico para evidenciar a relação entre os 4 principais community smells e os padrões de estrutura das comunidades.},
  doi                 = {10.1145/3387940.3392204},
  file                = {:destefano2020.pdf:PDF},
  groups              = {selecionados, inclusos, catology, caballero-review},
  isbn                = {9781450379632},
  journal             = {Proceedings - 2020 IEEE/ACM 42nd International Conference on Software Engineering Workshops, ICSEW 2020},
  keywords            = {Community patterns, Community smells, Empirical studies},
  language            = {English},
  location            = {Seoul, Republic of Korea},
  numpages            = {8},
  publication_stage   = {Final},
  ranking             = {rank3},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://doi.org/10.1145/3387940.3392204},
}

@Article{Caprarelli2020,
  author                 = {Caprarelli, Alessandro and Di Nitto, Elisabetta and Tamburri, Damian Andrew},
  journal                = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  title                  = {Fallacies and Pitfalls on the Road to DevOps: A Longitudinal Industrial Study},
  year                   = {2020},
  issn                   = {03029743},
  note                   = {#CE06;},
  pages                  = {200 – 210},
  volume                 = {12055 LNCS},
  abbrev_source_title    = {Lect. Notes Comput. Sci.},
  abstract               = {DevOps has come into play to help companies in improving their product delivery. This paper offers an overview of the fallacies and pitfalls faced in this context by engineers and operators in an industrial case-study. We reveal a total of 8 key fallacies and pitfalls that span the organisational structure, technical structures, as well as software process and delivery mechanisms in the target case-study. Practitioners can use these challenges as references for diagnosing their own scenario while planning their own potential DevOps process migration strategy. © 2020, Springer Nature Switzerland AG.},
  affiliations           = {Politecnico di Milano, Milan, Italy; TU/e - JADS, ’s-Hertogenbosch, Netherlands},
  author_keywords        = {DevOps quality; Organizational and technical aspects; Process migration},
  correspondence_address = {D.A. Tamburri; TU/e - JADS, ’s-Hertogenbosch, Netherlands; email: d.a.tamburri@tue.nl},
  doi                    = {10.1007/978-3-030-39306-9_15},
  editor                 = {Bruel J.-M. and Mazzara M. and Meyer B.},
  groups                 = {catology, caballero-review, diff-caballero-dantas},
  isbn                   = {978-303039305-2},
  keywords               = {Artificial intelligence; Computer science; Computers; Delivery mechanism; Industrial case study; Organisational structure; Process migration; Product delivery; Software process; Technical aspects; Technical structures; DevOps},
  language               = {English},
  priority               = {prio3},
  publication_stage      = {Final},
  publisher              = {Springer},
  readstatus             = {skimmed},
  source                 = {Scopus},
  type                   = {Conference paper},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85079095350&doi=10.1007%2f978-3-030-39306-9_15&partnerID=40&md5=e15a27daed2b846a16bf138ca4cc7ac0},
}

@Article{Tamburri2021,
  author                     = {Tamburri, Damian A. and Palomba, Fabio and Kazman, Rick},
  journal                    = {IEEE Transactions on Software Engineering},
  title                      = {Exploring Community Smells in Open-Source: An Automated Approach},
  year                       = {2021},
  issn                       = {1939-3520},
  month                      = {March},
  note                       = {Cited by: 20; All Open Access, Green Open Access},
  number                     = {3},
  pages                      = {630-652},
  volume                     = {47},
  abbrev_source_title        = {IEEE Trans Software Eng},
  abstract                   = {Software engineering is now more than ever a community effort. Its success often weighs on balancing distance, culture, global engineering practices and more. In this scenario many unforeseen socio-technical events may result into additional project cost or “social” debt, e.g., sudden, collective employee turnover. With industrial research we discovered community smells, that is, sub-optimal patterns across the organisational and social structure in a software development community that are precursors of such nasty socio-technical events. To understand the impact of community smells at large, in this paper we first introduce CodeFace4Smells, an automated approach able to identify four community smell types that reflect socio-technical issues that have been shown to be detrimental both the software engineering and organisational research fields. Then, we perform a large-scale empirical study involving over 100 years worth of releases and communication structures data of 60 open-source communities: we evaluate (i) their diffuseness, i.e., how much are they distributed in open-source, (ii) how developers perceive them, to understand whether practitioners recognize their presence and their negative effects in practice, and (iii) how community smells relate to existing socio-technical factors, with the aim of assessing the inter-relations between them. The key findings of our study highlight that community smells are highly diffused in open-source and are perceived by developers as relevant problems for the evolution of software communities. Moreover, a number of state-of-the-art socio-technical indicators (e.g., socio-technical congruence) can be used to monitor how healthy a community is and possibly avoid the emergence of social debt.},
  address                    = {10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA},
  affiliation                = {Palomba, F (Corresponding Author), Univ Zurich, CH-8006 Zurich, Switzerland. Tamburri, Damian A., Eindhoven Univ Technol, Eindhoven, Netherlands. Palomba, Fabio, Univ Zurich, CH-8006 Zurich, Switzerland. Kazman, Rick, Univ Hawaii, Informat Technol Management, Honolulu, HI 96822 USA. Kazman, Rick, SEI CMU, Honolulu, HI 96822 USA.},
  affiliations               = {Eindhoven University of Technology, Eindhoven, Netherlands; University of Zurich, Zurich, Switzerland; University of Hawaii SEI/CMU, Honolulu, HI, United States},
  author-email               = {d.a.tamburri@tue.nl palomba@ifi.uzh.ch kazman@hawaii.edu},
  author_keywords            = {empirical software engineering;; human aspects in software engineering; social software engineering; software community smells; Software organisational structures},
  coden                      = {IESED},
  correspondence_address     = {F. Palomba; University of Zurich, Zurich, Switzerland; email: palomba@ifi.uzh.ch},
  da                         = {2023-06-13},
  doc-delivery-number        = {RA1TM},
  doi                        = {10.1109/TSE.2019.2901490},
  eissn                      = {1939-3520},
  file                       = {:Tamburri2021 - Exploring Community Smells in Open Source_ an Automated Approach.pdf:PDF},
  funding-acknowledgement    = {SNSF Project named ``Data-driven Contemporary Code Review{''} {[}PP00P2\_170529]},
  funding-text               = {The authors would like to thank Dr. Simone Magnoni to the definition and refinement of the contents of this study and to Prof. Dr. Elisabetta Di Nitto for the feedback she gave during the inception of this study. Dr. Palomba gratefully acknowledges the support of the SNSF Project named ``Data-driven Contemporary Code Review{''} (No. PP00P2\_170529).},
  groups                     = {selecionados, inclusos, catology, caballero-review},
  journal-iso                = {IEEE Trans. Softw. Eng.},
  keywords                   = {Balancing; Industrial research; Microstructure; Odors; Open systems; Social networking (online); Social sciences computing; Software design; Software engineering; Tools; Empirical Software Engineering; Human aspects; Organisational structure; Organizational aspects; Social software engineering; Software community; Open source software},
  keywords-plus              = {IMPACT},
  language                   = {English},
  number-of-cited-references = {79},
  oa                         = {Green Published},
  orcid-numbers              = {Tamburri, Damian Andrew/0000-0003-1230-8961 Palomba, Fabio/0000-0001-9337-5116 Kazman, Rick/0000-0003-0392-2783},
  publication_stage          = {Final},
  publisher                  = {Institute of Electrical and Electronics Engineers Inc.},
  ranking                    = {rank5},
  readstatus                 = {read},
  research-areas             = {Computer Science; Engineering},
  researcherid-numbers       = {Tamburri, Damian Andrew/AAJ-2507-2021},
  source                     = {Scopus},
  times-cited                = {20},
  type                       = {Article},
  unique-id                  = {WOS:000631200300010},
  url                        = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062150097&doi=10.1109%2fTSE.2019.2901490&partnerID=40&md5=f9d049afe174884268c53fc7aceb0b06},
  usage-count-last-180-days  = {0},
  usage-count-since-2013     = {3},
  web-of-science-categories  = {Computer Science, Software Engineering; Engineering, Electrical \& Electronic},
  web-of-science-index       = {Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)},
}

@Article{Catolino2020b,
  author              = {Catolino, Gemma and Palomba, Fabio and Tamburri, Damian A. and Serebrenik, Alexander and Ferrucci, Filomena},
  journal             = {IEEE Software},
  title               = {Gender Diversity and Community Smells: Insights From the Trenches},
  year                = {2020},
  issn                = {1937-4194},
  month               = {Jan},
  number              = {1},
  pages               = {10-16},
  volume              = {37},
  abbrev_source_title = {IEEE Software},
  abstract            = {Given growing attention to gender diversity in software development teams, we asked practitioners if it was a useful tool to mitigate undesirable communication patterns. While many participants didn't consider gender diversity useful in this context, those who did were motivated by their own professional experience.},
  affiliations        = {University of Salerno, Software Engineering, Italy; Software Engineering, University of Salerno, Italy; Jheronimus Academy of Data Science, Netherlands; Software Evolution, Eindhoven University of Technology, Eindhoven, Netherlands},
  author_keywords     = {Community Smell; Gender Diversity; Survey},
  coden               = {IESOE},
  comment             = {O artigo continua o estudo sobre a relação de gênero (presença feminina) e ocorrência dos 4 bem conhecidos community smells. Realiza um suvery com profissionais e o resultado indica que os participantes não consideram o gênero como importante fator de influência em relação aos community smells. As respostas ressaltam que a experiência e habilidades de comunicação (atrelada ao tamanho da equipe) são mais determinantes para a ocorrência de community smells.},
  doi                 = {10.1109/MS.2019.2944594},
  file                = {:Catolino2020b - Gender Diversity and Community Smells_ Insights from the Trenches.pdf:PDF},
  groups              = {selecionados, catology, caballero-review, diff-caballero-dantas},
  keywords            = {Surveying; Surveys; Communication pattern; Communication skills; Community Smell; Gender diversity; Hiring process; Professional experiences; Software development teams; Technical expertise; Software design},
  language            = {English},
  publication_stage   = {Final},
  publisher           = {IEEE Computer Society},
  ranking             = {rank2},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Article},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072759911&doi=10.1109%2fMS.2019.2944594&partnerID=40&md5=3cb2e56c70b3a6bc15bd8ebd3ed08d63},
}

@InProceedings{Catolino2019,
  author              = {Catolino, Gemma and Palomba, Fabio and Tamburri, Damian A. and Serebrenik, Alexander and Ferrucci, Filomena},
  booktitle           = {Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Society},
  title               = {Gender Diversity and Women in Software Teams: How Do They Affect Community Smells?},
  year                = {2019},
  address             = {Montreal, Quebec, Canada},
  month               = {May},
  note                = {Cited by: 64; All Open Access, Green Open Access},
  pages               = {11–20},
  publisher           = {Institute of Electrical and Electronics Engineers Inc.},
  series              = {ICSE-SEIS '19},
  abbrev_source_title = {Proc. - IEEE/ACM Int. Conf. Softw. Eng.: Softw. Eng. Soc., ICSE-SEIS},
  abstract            = {As social as software engineers are, there is a known and established gender imbalance in our community structures, regardless of their open- or closed-source nature. To shed light on the actual benefits of achieving such balance, this empirical study looks into the relations between such balance and the occurrence of community smells, that is, sub-optimal circumstances and patterns across the software organizational structure. Examples of community smells are Organizational Silo effects (overly disconnected sub-groups) or Lone Wolves (defiant community members). Results indicate that the presence of women generally reduces the amount of community smells. We conclude that women are instrumental to reducing community smells in software development teams.},
  affiliations        = {University of Salerno, Italy; University of Zurich, Switzerland; Jeronimus Academy of Data Science and Eindhoven University of Technology, Netherlands; Eindhoven University of Technology, Netherlands},
  author_keywords     = {Community Smells; Empirical Study; Gender Balance; Software Organizational Structures},
  doi                 = {10.1109/ICSE-SEIS.2019.00010},
  file                = {:Catolino2019 - Gender Diversity and Women in Software Teams_ How Do They Affect Community Smells_.pdf:PDF},
  groups              = {selecionados, inclusos, catology, caballero-review},
  isbn                = {978-172811762-1},
  journal             = {Proceedings - 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Society, ICSE-SEIS 2019},
  keywords            = {Odors; Closed source; Community Smells; Community structures; Empirical studies; Gender diversity; Organizational structures; Software development teams; Software teams; Software design},
  language            = {English},
  numpages            = {10},
  publication_stage   = {Final},
  ranking             = {rank4},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://doi.org/10.1109/ICSE-SEIS.2019.00010},
}

@Conference{Tamburri2019a,
  author              = {Tamburri, Damian A. and Kazman, Rick and van den Heuvel, Willem-Jan},
  title               = {Splicing community and software architecture smells in agile teams: An industrial Study},
  year                = {2019},
  editor              = {Bui T.X.},
  note                = {Cited by: 3},
  pages               = {7037 – 7047},
  publisher           = {IEEE Computer Society},
  volume              = {2019-January},
  abbrev_source_title = {Proc. Annu. Hawaii Int. Conf. Syst. Sci.},
  abstract            = {Software engineering nowadays largely relies on agile methods to carry out software development. In often highly distributed organizations, agile teams can develop organisational and socio-technical issues loosely defined as community smells, which reflect sub-optimal organisational configurations that bear additional project cost, a phenomenon called social debt. In this paper we look into the co-occurrence of such nasty organisational phenomena-community smells-with software architecture smells-indicators that software architectures may exhibit sub-optimal modularization structures, with consequent additional cost. We conclude that community smells can serve as a guide to steer the qualities of software architectures within agile teams. © 2019 IEEE Computer Society. All rights reserved.},
  affiliations        = {TU/e - JADS; University of Hawaii, SEI-CMU; Universiteit van Tilburg, JADS},
  comment             = {O trabalho não aborda causas ou efeitos, muito menos, estratégias para refatoração. Trata-se de um estudo com agile teams para evidenciar quais architecture smells ocorrem.},
  doi                 = {10.24251/hicss.2019.843},
  file                = {:Tamburri2019a - Splicing Community and Software Architecture Smells in Agile Teams_ an Industrial Study.pdf:PDF},
  groups              = {selecionados, catology, caballero-review, diff-caballero-dantas},
  isbn                = {978-099813312-6},
  issn                = {15301605},
  journal             = {Proceedings of the Annual Hawaii International Conference on System Sciences},
  keywords            = {Agile manufacturing systems; Modular construction; Odors; Software architecture; Structural optimization; Additional costs; Agile methods; Co-occurrence; Distributed organizations; Modularizations; Organisational; Project cost; Socio-technical issues; Software design},
  language            = {English},
  publication_stage   = {Final},
  ranking             = {rank2},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108265280&partnerID=40&md5=0a4bd6a2cf38a1cdb30af51bded5fbd7},
}

@Article{Tamburri2019,
  author                 = {Tamburri, Damian A.},
  journal                = {IEEE Transactions on Computational Social Systems},
  title                  = {Software Architecture Social Debt: Managing the Incommunicability Factor},
  year                   = {2019},
  issn                   = {2329-924X},
  month                  = {Feb},
  note                   = {Cited by: 14; All Open Access, Green Open Access},
  number                 = {1},
  pages                  = {20-37},
  volume                 = {6},
  abbrev_source_title    = {IEEE Trans. Computat. Soc. Syst.},
  abstract               = {Architectural technical debt is the additional project cost connected to technical issues nested in software architectures. Similarly, many practitioners have already experienced that there exists within software architectures a form of social debt, that is, the additional project cost connected to sociotechnical and organizational issues evident in or related to software architectures. This paper illustrates four recurrent antipatterns or community smells connected to such architectural social debt and outlines a means to measure the additional project cost connected to their underlying cause: decision incommunicability. Evaluating the results in multiple focus groups, this paper concludes that studying social debt and community smells at the architecture level may prove vital to rid software development communities of critical organizational flaws incurring considerable additional cost.},
  affiliations           = {Jheronimus Academy of Data Science, Technische Universiteit Eindhoven, Eindhoven, 5612 AZ, Netherlands},
  author_keywords        = {Social debt; social debt cost estimation; social debt in software architecting; technical debt},
  correspondence_address = {D.A. Tamburri; Jheronimus Academy of Data Science, Technische Universiteit Eindhoven, Eindhoven, 5612 AZ, Netherlands; email: d.a.tamburri@tue.nl},
  doi                    = {10.1109/TCSS.2018.2886433},
  file                   = {:Tamburri2019 - Software Architecture Social Debt_ Managing the Incommunicability Factor (1).pdf:PDF;:Tamburri2019 - Software Architecture Social Debt_ Managing the Incommunicability Factor.pdf:PDF},
  groups                 = {selecionados, inclusos, catology, caballero-review},
  keywords               = {Cost estimating; Odors; Additional costs; Cost estimations; Development community; Organizational issues; Social debt; Software architecting; Technical debts; Underlying cause; Software design},
  language               = {English},
  publication_stage      = {Final},
  publisher              = {Institute of Electrical and Electronics Engineers Inc.},
  ranking                = {rank5},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Article},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061655975&doi=10.1109%2fTCSS.2018.2886433&partnerID=40&md5=e6693e173e86e6f5ee46cff0ae2f0a06},
}

@Article{Tamburri2019d,
  author                 = {Tamburri, Damian Andrew and Di Nucci, Dario and Di Giacomo, Lucio and Palomba, Fabio},
  journal                = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  title                  = {Omniscient devops analytics},
  year                   = {2019},
  issn                   = {03029743},
  note                   = {#CE06;},
  pages                  = {48 – 59},
  volume                 = {11350 LNCS},
  abbrev_source_title    = {Lect. Notes Comput. Sci.},
  abstract               = {DevOps predicates the continuity between Development and Operations teams at an unprecedented scale. Also, the continuity does not stop at tools, or processes but goes beyond into organizational practices, collaboration, co-located and coordinated effort. We conjecture that this unprecedented scale of continuity requires predictive analytics which are omniscient, that is (i) transversal to the technical, organizational, and social stratification in software processes and (ii) correlate all strata to provide a live and holistic snapshot of software development, its operations, and organization. Elaborating this conjecture, we illustrate a set of metrics to be used in the DevOps scenario and overview challenges and future research directions. © 2019, Springer Nature Switzerland AG.},
  affiliations           = {TU/e - JADS, ’s-Hertogenbosch, Netherlands; Vrije Universiteit Brussel, Brussels, Belgium; Guardia di Finanza di Trento, Trento, Italy; University of Zurich, Zürich, Switzerland},
  author_keywords        = {DevOps quality; Organizational and technical aspects; Predictive analytics},
  correspondence_address = {D.A. Tamburri; TU/e - JADS, ’s-Hertogenbosch, Netherlands; email: d.a.tamburri@tue.nl},
  doi                    = {10.1007/978-3-030-06019-0_4},
  editor                 = {Meyer B. and Meyer B. and Mazzara M. and Bruel J.-M.},
  groups                 = {catology, caballero-review, diff-caballero-dantas},
  isbn                   = {978-303006018-3},
  keywords               = {Predictive analytics; Co-located; Development and operations; Future research directions; Organizational practices; Social stratification; Software process; Technical aspects; Software design},
  language               = {English},
  priority               = {prio2},
  publication_stage      = {Final},
  publisher              = {Springer Verlag},
  readstatus             = {skimmed},
  source                 = {Scopus},
  type                   = {Conference paper},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061105307&doi=10.1007%2f978-3-030-06019-0_4&partnerID=40&md5=fe967be5b739bd55d54da635437930df},
}

@Conference{Brenner2019,
  author                 = {Brenner, Richard},
  title                  = {Balancing resources and load: Eleven nontechnical phenomena that contribute to formation or persistence of technical debt},
  year                   = {2019},
  note                   = {#CE06;},
  pages                  = {38 – 47},
  publisher              = {Institute of Electrical and Electronics Engineers Inc.},
  abbrev_source_title    = {Proc. - IEEE/ACM Int. Conf. Tech. Debt, TechDebt},
  abstract               = {Technical approaches to effective technical debt management-metrics, descriptors, transformation tools, and the like-are necessary but insufficient. We must also address drivers of technical debt that lie in the realm of psychology, politics, finance, and policy. The open question is: Will organizations exploit the impressive technology-based advancements in technical debt management to make engineers more effective? Or will they do something else with the cost savings those technologies generate? Psychology, politics, finance, and policy play critical roles in determining whether we gain control of technical debt. For example, if engineering groups become more adept at managing and preventing technical debt, while marketing and sales groups do not improve their own processes, the demands of marketing and sales groups for new products and capabilities might be associated with even shorter timelines than they now are. Schedule pressure usually results. Consequently, enterprise agility and engineering productivity might not benefit from the new technology-based technical debt management capabilities, even though the burden of technical debt might be reduced. Absent a significant change in the behavior of non-technologists, we can expect the effects of nontechnical causes of technical debt to persist, and possibly even to increase in significance. In this paper we explore eleven nontechnical phenomena that contribute to technical debt formation and persistence. We describe each one, and recommend lines of inquiry that can suggest (a) the significance of the phenomenon's effects on technical debt, from an organizational behavior perspective; (b) technologies that could aid in assessing that significance, and which could eventually aid in mitigating the phenomenon's deleterious effects; or (c) changes to phenomenon-related policy or accounting methods that could reduce the rate of formation or the persistence of technical debt. © 2019 IEEE.},
  affiliations           = {Chaco Canyon Consulting, University Heights, OH, United States},
  author_keywords        = {Cognitive bias; Finance; Organizational behavior; Policy; Politics; Psychology; Software design; Technical debt},
  correspondence_address = {R. Brenner; Chaco Canyon Consulting, University Heights, United States; email: rbrenner@ChacoCanyon.com},
  doi                    = {10.1109/TechDebt.2019.00013},
  groups                 = {catology, caballero-review, diff-caballero-dantas},
  isbn                   = {978-172813371-3},
  journal                = {Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019},
  keywords               = {Commerce; Finance; Marketing; Public policy; Software design; Cognitive bias; Organizational behavior; Politics; Psychology; Technical debts; Balancing},
  language               = {English},
  priority               = {prio2},
  publication_stage      = {Final},
  readstatus             = {skimmed},
  source                 = {Scopus},
  type                   = {Conference paper},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071191222&doi=10.1109%2fTechDebt.2019.00013&partnerID=40&md5=a0bb26afc929ef147bfb7b0f369553e7},
}

@Article{Palomba2021,
  author                 = {Palomba, Fabio and Andrew Tamburri, Damian and Arcelli Fontana, Francesca and Oliveto, Rocco and Zaidman, Andy and Serebrenik, Alexander},
  journal                = {IEEE Transactions on Software Engineering},
  title                  = {Beyond Technical Aspects: How Do Community Smells Influence the Intensity of Code Smells?},
  year                   = {2021},
  issn                   = {1939-3520},
  month                  = {Jan},
  note                   = {Cited by: 29; All Open Access, Green Open Access},
  number                 = {1},
  pages                  = {108-129},
  volume                 = {47},
  abbrev_source_title    = {IEEE Trans Software Eng},
  abstract               = {Code smells are poor implementation choices applied by developers during software evolution that often lead to critical flaws or failure. Much in the same way, community smells reflect the presence of organizational and socio-technical issues within a software community that may lead to additional project costs. Recent empirical studies provide evidence that community smells are often-if not always-connected to circumstances such as code smells. In this paper we look deeper into this connection by conducting a mixed-methods empirical study of 117 releases from 9 open-source systems. The qualitative and quantitative sides of our mixed-methods study were run in parallel and assume a mutually-confirmative connotation. On the one hand, we survey 162 developers of the 9 considered systems to investigate whether developers perceive relationship between community smells and the code smells found in those projects. On the other hand, we perform a fine-grained analysis into the 117 releases of our dataset to measure the extent to which community smells impact code smell intensity (i.e., criticality). We then propose a code smell intensity prediction model that relies on both technical and community-related aspects. The results of both sides of our mixed-methods study lead to one conclusion: community-related factors contribute to the intensity of code smells. This conclusion supports the joint use of community and code smells detection as a mechanism for the joint management of technical and social problems around software development communities.},
  affiliations           = {University of Zürich, Zürich, Switzerland; Eindhoven University of Technology, Eindhoven, AZ, Netherlands; University of Milano Bicocca, Milano, Italy; University of Molise, Campobasso, Italy; Delft Unversity of Technology, Delft, Netherlands},
  author_keywords        = {Code smells; community smells; mixed-methods study; organizational structure},
  coden                  = {IESED},
  correspondence_address = {F. Palomba; University of Zürich, Zürich, Switzerland; email: palomba@ifi.uzh.ch},
  doi                    = {10.1109/TSE.2018.2883603},
  file                   = {:Palomba2021 - Beyond Technical Aspects_ How Do Community Smells Influence the Intensity of Code Smells_.pdf:PDF},
  groups                 = {selecionados, inclusos, catology, caballero-review},
  keywords               = {Feature extraction; Odors; Open source software; Predictive analytics; Software design; Software engineering; Tools; Code smell; community smells; Convergence; Mixed method; Organizational structures; Predictive models; Open systems},
  language               = {English},
  publication_stage      = {Final},
  publisher              = {Institute of Electrical and Electronics Engineers Inc.},
  ranking                = {rank4},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Article},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057852491&doi=10.1109%2fTSE.2018.2883603&partnerID=40&md5=1dd8327aba9f59450939b8afa8282ab7},
}

@Article{Tamburri2019c,
  author                 = {Tamburri, Damian A. and Palomba, Fabio and Serebrenik, Alexander and Zaidman, Andy},
  journal                = {Empirical Software Engineering},
  title                  = {Discovering community patterns in open-source: a systematic approach and its evaluation},
  year                   = {2019},
  issn                   = {13823256},
  note                   = {Cited by: 33; All Open Access, Green Open Access, Hybrid Gold Open Access},
  number                 = {3},
  pages                  = {1369 – 1417},
  volume                 = {24},
  abbrev_source_title    = {Empir Software Eng},
  abstract               = {“There can be no vulnerability without risk; there can be no community without vulnerability; there can be no peace, and ultimately no life, without community.” - [M. Scott Peck] The open-source phenomenon has reached the point in which it is virtually impossible to find large applications that do not rely on it. Such grand adoption may turn into a risk if the community regulatory aspects behind open-source work (e.g., contribution guidelines or release schemas) are left implicit and their effect untracked. We advocate the explicit study and automated support of such aspects and propose Yoshi (Y ielding O pen-S ource H ealth I nformation), a tool able to map open-source communities onto community patterns, sets of known organisational and social structure types and characteristics with measurable core attributes. This mapping is beneficial since it allows, for example, (a) further investigation of community health measuring established characteristics from organisations research, (b) reuse of pattern-specific best-practices from the same literature, and (c) diagnosis of organisational anti-patterns specific to open-source, if any. We evaluate the tool in a quantitative empirical study involving 25 open-source communities from GitHub, finding that the tool offers a valuable basis to monitor key community traits behind open-source development and may form an effective combination with web-portals such as OpenHub or Bitergia. We made the proposed tool open source and publicly available. © 2018, The Author(s).},
  affiliations           = {Jheronimus Academy of Data Science (JADS), Eindhoven University of Technology, s’Hertogenbosch, Netherlands; University of Zürich, Zürich, Switzerland; Eindhoven University of Technology, Eindhoven, Netherlands; Delft University of Technology, Delft, Netherlands},
  author_keywords        = {Community patterns; Community types; Empirical software engineering; Open source systems and community analysis},
  coden                  = {ESENF},
  correspondence_address = {D.A. Tamburri; Jheronimus Academy of Data Science (JADS), Eindhoven University of Technology, s’Hertogenbosch, Netherlands; email: d.a.tamburri@tue.nl},
  doi                    = {10.1007/s10664-018-9659-9},
  file                   = {:Tamburri2019c - Discovering Community Patterns in Open Source_ a Systematic Approach and Its Evaluation.pdf:PDF},
  groups                 = {selecionados, inclusos, catology, caballero-review},
  keywords               = {C (programming language); Open systems; Portals; Community analysis; Community patterns; Community types; Empirical Software Engineering; Open source communities; Open source development; Quantitative empirical studies; Regulatory aspects; Open source software},
  language               = {English},
  priority               = {prio1},
  publication_stage      = {Final},
  publisher              = {Springer New York LLC},
  ranking                = {rank3},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Article},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056659219&doi=10.1007%2fs10664-018-9659-9&partnerID=40&md5=2095cc1f0b0c2f6e828b582d7ae9d743},
}

@Article{Lavallee2018,
  author    = {Lavallee, Mathieu and Robillard, Pierre N.},
  journal   = {e-Informatica Vol. XII},
  title     = {Are We Working Well with Others? How the Multi Team Systems Impact Software Quality},
  year      = {2018},
  pages     = {2018; ISSN 1897--7979},
  doi       = {10.5277/E-INF180105},
  groups    = {catology, caballero-review, diff-caballero-dantas},
  keywords  = {multi team system, human interaction, quality management, team management, industrial study},
  language  = {en},
  publisher = {Institute of Applied Informatics, Wroclaw University of Technology, Wroclaw},
}

@Article{Tamburri2016,
  author              = {Tamburri, Damian A. and Kazman, Rick and Fahimi, Hamed},
  journal             = {IEEE Software},
  title               = {The Architect's Role in Community Shepherding},
  year                = {2016},
  issn                = {07407459},
  note                = {Cited by: 49},
  number              = {6},
  pages               = {70 – 79},
  volume              = {33},
  abbrev_source_title = {IEEE Software},
  abstract            = {Software architects don't just design architecture components or champion architecture qualities; they often must guide and harmonize the entire community of project stakeholders. The community-shepherding aspects of the architect's role have been gaining attention, given the increasing importance of complex 'organizational rewiring' scenarios such as DevOps, open source strategies, transitions to agile development, and corporate acquisitions. In these scenarios, architects would benefit by having effective models to align communities with architectures. This article discusses the 'smells' indicating that a community isn't functioning efficiently, offers a set of mitigations for those smells, and provides an overview of community types. © 2016 IEEE.},
  affiliations        = {Politecnico di Milano, Italy; University of Hawaii, United States; CGI, Canada},
  author_keywords     = {architectural social debt; social debt management; software architecture shepherds; software communities; software community smells; software development; software engineering; software organizational structure; software social debt},
  coden               = {IESOE},
  doi                 = {10.1109/MS.2016.144},
  file                = {:tamburri2016.pdf:PDF},
  groups              = {selecionados, inclusos, catology, caballero-review},
  keywords            = {Mergers and acquisitions; Odors; Open source software; Software architecture; Software engineering; Agile development; architectural social debt; Design architecture; Open sources; Organizational structures; Project stakeholders; Software architects; Software community; Software design},
  language            = {English},
  publication_stage   = {Final},
  publisher           = {IEEE Computer Society},
  ranking             = {rank5},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Article},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994403514&doi=10.1109%2fMS.2016.144&partnerID=40&md5=903721c96045a6521a1d30f38a44c46e},
}

@Article{Tamburri2015,
  author     = {Tamburri, Damian A. and Kruchten, Philippe and Lago, Patricia and Vliet, Hans van},
  journal    = {Journal of Internet Services and Applications},
  title      = {Social debt in software engineering: insights from industry},
  year       = {2015},
  issn       = {1869-0238},
  number     = {1},
  pages      = {10},
  volume     = {6},
  abstract   = {Social debt is analogous to technical debt in many ways: it represents the state of software development organisations as the result of “accumulated” decisions. In the case of social debt, decisions are about people and their interactions. Our objective was to study the causality around social debt in practice. In so doing, we conducted exploratory qualitative research in a large software company. We found many forces together causing social debt; we represented them in a framework, and captured anti-patterns that led to the debt in the first place. Finally, we elicited best practices that technicians adopted to pay back some of the accumulated debt. We learned that social debt is strongly correlated with technical debt and both forces should be reckoned with together during the software process.},
  doi        = {10.1186/s13174-015-0024-6},
  file       = {:Tamburri2015 - Social Debt in Software Engineering_ Insights from Industry.pdf:PDF},
  groups     = {selecionados, inclusos, catology, caballero-review},
  ranking    = {rank5},
  readstatus = {read},
  refid      = {Tamburri2015},
  url        = {https://doi.org/10.1186/s13174-015-0024-6},
}

%% recent papers
%% sarmento - (carlos)
@InProceedings{Lambiase2022,
  author              = {Lambiase, Stefano and Catolino, Gemma and Tamburri, Damian A. and Serebrenik, Alexander and Palomba, Fabio and Ferrucci, Filomena},
  booktitle           = {Proceedings of the 2022 ACM/IEEE 44th International Conference on Software Engineering: Software Engineering in Society},
  title               = {Good Fences Make Good Neighbours? On the Impact of Cultural and Geographical Dispersion on Community Smells},
  year                = {2022},
  address             = {New York, NY, USA},
  month               = {May},
  note                = {Cited by: 2},
  pages               = {67–78},
  publisher           = {Association for Computing Machinery},
  series              = {ICSE-SEIS '22},
  abbrev_source_title = {Proc Int Conf Software Eng},
  abstract            = {Software development is de facto a social activity that often involves people from all places to join forces globally. In such common instances, project managers must face social challenges, e.g., personality conflicts and language barriers, which often amount literally to "culture shock". In this paper, we seek to analyze and illustrate how cultural and geographical dispersion---that is, how much a community is diverse in terms of its members' cultural attitudes and geographical collocation---influence the emergence of collaboration and communication problems in open-source communities, a.k.a. community smells, the socio-technical precursors of unforeseen, often nasty organizational conditions amounting collectively to the phenomenon called social debt. We perform an extensive empirical study on cultural characteristics of GitHub developers, and build a regression model relating the two types of dispersion---cultural and geographical---with the emergence of four types of community smells, i.e., Organizational Silo, Lone Wolf, Radio Silence, and Black Cloud. Results indicate that cultural and geographical factors influence collaboration and communication within open-source communities, to an extent which incites---or even more interestingly mitigates, in some cases---community smells, e.g., Lone Wolf, in development teams. Managers can use these findings to address their own organizational structure and tentatively diagnose any nasty phenomena related to the conditions under study.To what extent does the global and multi-cultural nature of software engineering influence software processes welfare? More specifically, does an increase in "globalization" of software activities negatively or positively influence known nasty effects common in the process of software construction? Rotating around these questions, this research finds that there is in fact evidence of the aforementioned influence but it does not provide for positive effects only. Specifically, a decrease of globalization does not necessarily bode positively on conditions such as lone developers working in an individualistic fashion---a phenomenon known as "lone wolf" effect---and other nasty organizational phenomena potentially slowing down or halting software construction and maintenance activities.},
  affiliations        = {SeSa Lab, University of Salerno, Salerno, Italy; Jheronimus Academy of Data Science, 's-Hertogenbosch, Netherlands; Eindhoven University of Technology, Eindhoven, Netherlands},
  author_keywords     = {Community Smells; Cultural Dispersion; Empirical Studies; Global Software Engineering; Software Organizational Structures},
  coden               = {PCSED},
  doi                 = {10.1145/3510458.3513015},
  file                = {:3510458.3513015.pdf:PDF},
  groups              = {selecionados, inclusos, catology, diff-dantas-caballero},
  isbn                = {9781450392273},
  issn                = {02705257},
  journal             = {Proceedings - International Conference on Software Engineering},
  keywords            = {community smells, global software engineering, software organizational structures, cultural dispersion, empirical studies},
  language            = {English},
  location            = {Pittsburgh, Pennsylvania},
  numpages            = {12},
  publication_stage   = {Final},
  ranking             = {rank5},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://doi.org/10.1145/3510458.3513015},
}

@InProceedings{Sarmento2022,
  author              = {Sarmento, Camila and Massoni, Tiago and Serebrenik, Alexander and Catolino, Gemma and Tamburri, Damian and Palomba, Fabio},
  booktitle           = {2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  title               = {Gender Diversity and Community Smells: A Double-Replication Study on Brazilian Software Teams},
  year                = {2022},
  month               = {March},
  note                = {Cited by: 2},
  pages               = {273-283},
  publisher           = {Institute of Electrical and Electronics Engineers Inc.},
  abbrev_source_title = {Proc. - IEEE Int. Conf. Softw. Anal., Evol. Reengineering, SANER},
  abstract            = {Social debts in software teams are gaining increasing attention from the research community due to their potential adverse effects on software quality. For instance, community smells are indicators of sub-optimal organizational structures and may well lead to the emergence of social debt. Previous studies analyzed which factors influence the emergence/mitigation of such smells. In particular, studies by Catolino et al. showed how factors related to team composition, particularly gender diversity, correlated to the mitigation of community smells. However, a confirmation survey on 60 practitioners suggested that these results were not aligned with the experts' perceptions. In a separate survey, Catolino et al. collected the most common team refactoring strategies for those community smells. In this work we replicate two studies by those authors, focusing on the Brazilian software teams; culture-specific expectations on the behavior of people of different genders might have affected the perception of the importance of gender diversity and refactoring strategies when mitigating community smells. We translated the survey instrument used by Catolino et al. to Brazilian Portuguese and recruited 184 Brazilian developers. Re-sults did not show significant differences from the original study; indeed, participants perceived gender diversity as less valuable to mitigate community smells than such factors like experience or team size. Additionally, we performed a qualitative analysis of an open question within the questionnaire for the refactoring strategies. Brazilian developers agree with the original studies for most smells, mainly promoting restructuring communities, creating a communication plan and mentoring. We believe these results provide further evidence on the problem and its implications when managing software teams, avoiding technical debt and maintenance issues due to team communication and coordination problems.},
  affiliations        = {Federal University of Campina Grande, Campina Grande, Brazil; Eindhoven University of Technology, Eindhoven, Netherlands; Jheronimus Academy of Data Science, 's-Hertogenbosch, Netherlands; University of Salerno, Salerno, Italy},
  author_keywords     = {Commu-nity Smells; Development Teams; Gender Diversity; Social Debt},
  doi                 = {10.1109/SANER53432.2022.00043},
  file                = {:Gender_Diversity_and_Community_Smells_A_Double-Replication_Study_on_Brazilian_Software_Teams.pdf:PDF},
  groups              = {selecionados, inclusos, catology, diff-dantas-caballero},
  isbn                = {978-166543786-8},
  issn                = {1534-5351},
  journal             = {Proceedings - 2022 IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2022},
  keywords            = {Behavioral research; Computer software selection and evaluation; Human resource management; Odors; Structural optimization; Adverse effect; Commu-nity smell; Development teams; Gender diversity; Refactorings; Replication study; Research communities; Social debt; Software Quality; Software teams; Surveys},
  language            = {English},
  publication_stage   = {Final},
  ranking             = {rank4},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85133692894&doi=10.1109%2fSANER53432.2022.00043&partnerID=40&md5=e7fabf15f8c5c0dc44830467eb9dd6fd},
}

%% carlos - (caballero & sarmento)
@InProceedings{Tahsin2022,
  author                 = {Tahsin, Noshin and Sakib, Kazi},
  booktitle              = {2022 29th Asia-Pacific Software Engineering Conference (APSEC)},
  title                  = {Refactoring Community Smells: An Empirical Study on the Software Practitioners of Bangladesh},
  year                   = {2022},
  month                  = {Dec},
  note                   = {Cited by: 0},
  pages                  = {422-426},
  publisher              = {IEEE Computer Society},
  volume                 = {2022-December},
  abbrev_source_title    = {Proc. Asia Pac. Softw. Eng. Conf. APSEC},
  abstract               = {Community smells are organizational and social anti-patterns in the development community that need to be refactored. In the literature, studies on community smell refactoring are found from the very conceptual level. However, little is known about the practitioners’ perceptions, refactoring readiness and the refactoring strategies adopted in local software communities. This paper bridge this gap by exploring these issues in the software industry of Bangladesh. A depth interview-based study was conducted on local software practitioners chosen through a convenience sample recruitment strategy. Interviews were transcribed and analyzed using Straussian Grounded Theory. We collected data on the four prominent smells according to literature and introduced a new measure called ‘Refactoring Readiness’ to calculate the community smell refactoring preparedness of a software development community. Analyzing the data, it is seen that 85% local practitioners perceive community smells as harmful but less than half take step to mitigate those smells. We identified the refactoring strategies (e.g. creating a structured communication plan, mentoring) currently adopted by them and found that the Refactoring Readiness of the software industry of Bangladesh is 0.63 on a scale of 0-1. This provides evidence that more work needs to be done for refactoring community smells from the local sub-optimal development communities.},
  affiliations           = {University of Dhaka, Institute of Information Technology, Dhaka, Bangladesh},
  author_keywords        = {community smell; empirical study; refactoring},
  correspondence_address = {N. Tahsin; University of Dhaka, Institute of Information Technology, Dhaka, Bangladesh; email: bsse0914@iit.du.ac.bd},
  doi                    = {10.1109/APSEC57359.2022.00055},
  file                   = {:Refactoring_Community_Smells_An_Empirical_Study_on_the_Software_Practitioners_of_Bangladesh.pdf:PDF},
  groups                 = {selecionados, inclusos, catology, diff-dantas-caballero},
  isbn                   = {978-166545537-4},
  issn                   = {2640-0715},
  journal                = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
  keywords               = {Odors; Anti-patterns; Bangladesh; Community smell; Development community; Empirical studies; Literature studies; Organisational; Refactorings; Software industry; Software practitioners; Software design},
  language               = {English},
  publication_stage      = {Final},
  ranking                = {rank5},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Conference paper},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85149172008&doi=10.1109%2fAPSEC57359.2022.00055&partnerID=40&md5=21eb50e80022f084d7eb0dac443ad1cf},
}

@Article{Ahammed2021a,
  author     = {Ahammed, Toukir and Ahmed, Sumon and Khan, Mohammed Shafiul Alam},
  journal    = {Knowledge Engineering and Data Science},
  title      = {Do Missing Link Community Smell Affect Developers Productivity: An Empirical Study},
  year       = {2021},
  number     = {1},
  pages      = {29--37},
  volume     = {4},
  abstract   = {Missing link smell occurs when developers contribute to the same source code without communicating with each other. Existing studies have analyzed the relationship of missing link smells with code smell and developer contribution. However, the productivity of developers involved in missing link smell has not been explored yet. This study investigates how productivity differs between smelly and non-smelly developers. For this purpose, the productivity of smelly and non-smelly developers of seven open-source projects are analyzed. The result shows that the developers not involved in missing link smell have more productivity than the developers involved in smells. The observed difference is also found statistically significant.},
  doi        = {10.17977/um018v4i12021p29-37},
  file       = {:Ahammed2021a - Do Missing Link Community Smell Affect Developers Productivity_ an Empirical Study.pdf:PDF},
  groups     = {selecionados, inclusos, catology, diff-dantas-caballero},
  ranking    = {rank4},
  readstatus = {read},
}